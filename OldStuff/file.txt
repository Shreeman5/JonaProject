

            // const text = svg.selectAll("text")
            //     .data(root.descendants().filter(d => d.depth))
            //     .enter()
            //     .append("text")
            //     .attr("transform", d => {
            //         const angle = (d.x0 + d.x1) / 2 * 180 / Math.PI - 90;
            //         const rotate = angle > 90 ? angle - 180 : angle;
            //         let x = arc.centroid(d)[0];
            //         let y = arc.centroid(d)[1];
            //         // Move the label away from the center
                    
            //         let distance = 280
            //         //console.log(d.depth)
            //         //const distance = 280; // Adjust this value as needed
            //         x += Math.cos(angle * Math.PI / 180) * distance;
            //         y += Math.sin(angle * Math.PI / 180) * distance;
            //         const translate = `translate(${x}, ${y})`;
            //         return `${translate} rotate(${rotate})`;
            //     })
            //     .attr("dy", "0.35em")
            //     .text(d => {
            //         if (!d.hasOwnProperty('children') && d.depth >= 3) {
            //             return d.data.name + '        ' + (d.data.value * 100).toFixed(1) + '%'
            //         }
            //     })
            //     .attr("class", "label")
            //     .style("fill", "#000")
            //     .style("font-size", "25");

                

            // const text = svg.selectAll("text")
            //     .data(root.descendants().filter(d => d.depth))
            //     .enter()
            //     .append("text")
            //     .attr("dy", "0.35em")
            //     .text(d => {
            //         if (!d.hasOwnProperty('children')) {
            //             return d.data.name + '        ' + (d.data.value * 100).toFixed(1) + '%'
            //         }
            //     })
            //     .attr("class", "label")
            //     .style("fill", "#000")
            //     .style("font-size", "25")
            //     .each(function(d) {
            //         const centroid = arc.centroid(d);
            //         const angle = (d.x0 + d.x1) / 2;
            //         const x = centroid[0] + Math.cos(angle) * 100; // Adjust distance from arc
            //         const y = centroid[1] + Math.sin(angle) * 100; // Adjust distance from arc
            //         d3.select(this)
            //             .attr("transform", `translate(${x},${y})`);
            //     });



              // let text1 = svg.append("text")
            //     .attr("x", -22)
            //     .attr("y", -10)
            //     .attr("font-size", "28")
            //     .attr("fill", "black")
            //     .text("Go")
            //     .on("click", () => click(null, currentParent));

            // svg.append("text")
            //     .attr("x", -22)
            //     .attr("y", 18)
            //     .attr("font-size", "28")
            //     .attr("fill", "black")
            //     .text("Back")
            //     .on("click", () => click(null, currentParent));

                             // text.transition(t)
                    //     .style("font-weight", d => {
                    //         return (d === p) ? "bold" : "normal";
                    //     })
                    //     .style("font-style", d => {
                    //         return (d === p) ? "italic" : "normal";
                    //     })
                    //     .style("font-size", d => {
                    //         return (d === p) ? "40" : "25";
                    //     })
                    //     .style("opacity", d => {
                    //         return (d.ancestors().includes(p) || d.descendants().includes(p)) ? 1 : 0;
                    //     })
                    //     .attrTween("transform", d => () => {
                    //         const angle = (d.current.x0 + d.current.x1) / 2 * 180 / Math.PI - 90;
                    //         const rotate = angle > 90 ? angle - 180 : angle;
                    //         const translate = `translate(${arc.centroid(d.current)[0]}, ${arc.centroid(d.current)[1]})`;
                    //         return `${translate} rotate(${rotate})`;
                    //     });
